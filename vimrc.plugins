" makes neovim python integration work
let g:python_host_prog='/usr/local/bin/python'

" setup merlin path
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
let g:ocamlmerlin = g:opamshare . "/merlin/vim"
exe "set rtp+=" . g:ocamlmerlin

 " required by Vundle
filetype off

" Vundle setup
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" manage Vundle with Vundle
Plugin 'gmarik/Vundle.vim'

" search, completion, code analysis and general IDE stuff
Plugin 'vim-ruby/vim-ruby'
if has("autocmd")
  autocmd FileType ruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby let g:rubycomplete_buffer_loading=1
  autocmd FileType ruby let g:rubycomplete_classes_in_global=1
  autocmd FileType ruby let g:rubycomplete_rails = 1
endif

" clojure
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-classpath'
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-clojure-highlight'
" Plugin 'bhurlow/vim-parinfer' " doesn't seem to work
" Plugin 'vim-scripts/paredit.vim'
Plugin 'vim-scripts/vim-niji' " colored parens for lisps
if has("autocmd")
  autocmd FileType clojure set iskeyword+=-
  " visual mode: execute selected block
  autocmd FileType clojure vmap <D-r> :Eval<CR>
  " normal mode: eval innermost form
  autocmd FileType clojure nmap <D-r> cpp
  " get docs
  autocmd FileType clojure map <D-k> K
  " for overtone
  autocmd FileType clojure map <D-1> :Eval (stop)<CR>
end

Plugin 'Valloric/YouCompleteMe'
set completeopt-=preview
let g:ycm_key_detailed_diagnostics = '<leader>c'
let g:ycm_confirm_extra_conf = 0
let g:ycm_semantic_triggers = {'clojure': ['(', 're!\[.*\]\s']}

Plugin 'mileszs/ack.vim'
let g:ackprg = 'ag --nogroup --nocolor --column'

Plugin 'scrooloose/syntastic'
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

let g:syntastic_ruby_checkers=['rubocop', 'mri']
let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_scss_checkers=['scss_lint']
let g:syntastic_ocaml_checkers = ['merlin']

let g:syntastic_quiet_messages={}
let g:syntastic_check_on_open=1

" ui
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-powerline'
set laststatus=2

" navigation
Plugin 'Lokaltog/vim-easymotion'
let g:EasyMotion_leader_key = 'm'

Plugin 'kien/ctrlp.vim'
map <D-b> :CtrlPBuffer<CR>
imap <D-b> :CtrlPBuffer<CR>
map <D-t> :CtrlP<CR>
imap <D-t> :CtrlP<CR>

let g:ctrlp_max_height = 30

Plugin 'vim-scripts/buftabs'
Plugin 'vim-scripts/taglist.vim'

" Taglist
map <Leader>l :TlistToggle<CR>
let Tlist_Ctags_Cmd = g:ctags_path
let Tlist_Use_Right_Window = 1
let Tlist_WinWidth = 35
let Tlist_Enable_Fold_Column = 0
let Tlist_Show_One_File = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
Plugin 'scrooloose/nerdtree'

" Toggle drawer bindings
map <D-d> :NERDTreeToggle<CR>
imap <D-d> <Esc>:NERDTreeToggle<CR>

let NERDTreeShowHidden=1      " Show dotfiles in NERDTree
let NERDTreeHijackNetrw = 1   " Don't hijack Netrw
let NERDTreeIgnore = ['\.pyc$', '\.d$', '\.o$', '^.waf-']

autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
  \ b:NERDTreeType == "primary") | q | endif

" colorschemes
Plugin 'pigoz/herald'

" languages packages
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'elixir-lang/vim-elixir'
Plugin 'tikhomirov/vim-glsl'
Plugin 'wting/rust.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'ElmCast/elm-vim'
Plugin 'hashivim/vim-terraform'
Plugin 'raichoo/purescript-vim'

" ocaml
Plugin 'def-lkb/ocp-indent-vim'

call vundle#end()
